{
  "compilerOptions": {
    // 指定 ECMAScript 目标版本 "ES3"（默认）， "ES5"， "ES6" / "ES2015"， "ES2016"， "ES2017" 或 "ESNext"。
    "target": "es5",
    // 编译过程中需要引入的库文件的列表。
    "lib": ["dom", "dom.iterable", "esnext"],
    // 允许编译javascript文件。
    "allowJs": true,
    // 忽略所有的声明文件（ *.d.ts）的类型检查
    "skipLibCheck": true,
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "esModuleInterop": true,
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    // 启用所有严格类型检查选项。
    "strict": true,
    // 禁止对同一个文件的不一致的引用。
    "forceConsistentCasingInFileNames": true,
    // 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）
    "noFallthroughCasesInSwitch": true,
    // 指定生成哪个模块系统代码： "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"。
    // ► 只有 "AMD"和 "System"能和 --outFile一起使用。
    // ► "ES6"和 "ES2015"可使用在目标输出为 "ES5"或更低的情况下。
    "module": "esnext",
    // 决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）。查看模块解析了解详情。
    "moduleResolution": "node",
    "resolveJsonModule": true,
    // 将每个文件作为单独的模块（与“ts.transpileModule”类似）。
    "isolatedModules": true,
    // 不生成输出文件。
    "noEmit": true,
    // 在 .tsx文件里支持JSX： "React"或 "Preserve"。查看 JSX。
    "jsx": "react-jsx"
  },
  "include": ["src"]
}
